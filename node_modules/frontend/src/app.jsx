import React, { useState, useRef, useEffect } from 'react';
import botImg from '/bot.svg';
import userImg from '/user.svg';
import '../index.css';
// import { backend } from 'declarations/backend'; // Uncomment if backend is used

const App = () => {
  const [chat, setChat] = useState([
    { system: { content: "I'm a sovereign AI agent living on the Internet Computer. Ask me anything." } }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [insight, setInsight] = useState(null);
  const [fileName, setFileName] = useState('');
  const chatBoxRef = useRef(null);

  const formatDate = (date) => {
    const h = '0' + date.getHours();
    const m = '0' + date.getMinutes();
    return `${h.slice(-2)}:${m.slice(-2)}`;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!inputValue.trim() || isLoading) return;

    const userMessage = { user: { content: inputValue } };
    const thinkingMessage = { system: { content: 'Thinking ...' } };

    setChat((prev) => [...prev, userMessage, thinkingMessage]);
    setInputValue('');
    setIsLoading(true);

    // Simulate backend response (or replace with: await backend.chat(...))
    setTimeout(() => {
      const response = { system: { content: `You said: "${inputValue}". I'm still learning. Try uploading data for insights.` } };
      setChat((prev) => [...prev.slice(0, -1), response]);
      setIsLoading(false);
    }, 1500);
  };

  const handleUpload = (e) => {
    const file = e.target.files[0];
    if (!file) return;
    setFileName(file.name);
    setInsight(null);
    setIsLoading(true);

    // Simulate file processing
    setTimeout(() => {
      setInsight("‚úÖ AI Insight: Your dataset contains null values in column 'age' and several duplicate entries.");
      setIsLoading(false);
    }, 2000);
  };

  useEffect(() => {
    if (chatBoxRef.current) {
      chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
    }
  }, [chat]);

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center py-6 px-4">
      <div className="w-full max-w-2xl bg-white rounded-lg shadow p-6">
        <h1 className="text-3xl font-bold text-blue-600 mb-4">ü§ñ DeAI ‚Äì Agent Launcher</h1>

        {/* Chat Display */}
        <div className="h-72 overflow-y-auto space-y-4 mb-4 p-2 bg-gray-50 rounded border" ref={chatBoxRef}>
          {chat.map((msg, i) => {
            const isUser = 'user' in msg;
            const text = isUser ? msg.user.content : msg.system.content;
            const img = isUser ? userImg : botImg;
            const name = isUser ? 'User' : 'Agent';

            return (
              <div key={i} className={`flex items-start gap-2 ${isUser ? 'justify-end' : 'justify-start'}`}>
                {!isUser && <img src={img} className="h-6 w-6 mt-1" alt="bot" />}
                <div className={`${isUser ? 'bg-blue-500 text-white' : 'bg-white text-gray-800'} px-3 py-2 rounded-md max-w-[80%]`}>
                  <div className="text-xs text-gray-500 mb-1">{name} ‚Ä¢ {formatDate(new Date())}</div>
                  {text}
                </div>
                {isUser && <img src={img} className="h-6 w-6 mt-1" alt="user" />}
              </div>
            );
          })}
        </div>

        {/* Chat Input */}
        <form className="flex items-center gap-2" onSubmit={handleSubmit}>
          <input
            type="text"
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            disabled={isLoading}
            placeholder="Ask the agent anything..."
            className="flex-1 border border-gray-300 px-3 py-2 rounded focus:outline-none"
          />
          <button
            type="submit"
            disabled={isLoading}
            className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded disabled:bg-blue-300"
          >
            Send
          </button>
        </form>

        {/* File Upload */}
        <div className="mt-6">
          <label className="block mb-1 font-medium">üìÅ Upload dataset for AI analysis:</label>
          <input
            type="file"
            onChange={handleUpload}
            className="w-full border border-gray-300 p-2 rounded"
          />
          {fileName && <p className="text-sm text-gray-600 mt-1">Uploaded: <strong>{fileName}</strong></p>}
        </div>

        {/* AI Insight Display */}
        {insight && (
          <div className="mt-4 p-4 bg-green-100 text-green-800 rounded shadow">
            <h3 className="font-semibold mb-1">üìä Insight:</h3>
            <p>{insight}</p>
          </div>
        )}

        {/* Loading Spinner */}
        {isLoading && <p className="mt-4 text-blue-500 italic">‚è≥ Processing...</p>}
      </div>
    </div>
  );
};

export default App;
